{
  "version": 3,
  "sources": ["../../../../../../node_modules/ngx-skeleton-loader/fesm2022/ngx-skeleton-loader.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, input, numberAttribute, computed, isDevMode, ChangeDetectionStrategy, Component, NgModule } from '@angular/core';\nconst _c0 = [\"*\"];\nfunction NgxSkeletonLoaderComponent_For_3_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n  }\n}\nfunction NgxSkeletonLoaderComponent_For_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, NgxSkeletonLoaderComponent_For_3_Conditional_1_Template, 1, 0);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    const appearanceValue_r2 = i0.ɵɵreadContextLet(0);\n    const animationValue_r3 = i0.ɵɵreadContextLet(1);\n    i0.ɵɵstyleMap(ctx_r0.styles());\n    i0.ɵɵclassProp(\"custom-content\", appearanceValue_r2 === \"custom-content\")(\"circle\", appearanceValue_r2 === \"circle\")(\"progress\", animationValue_r3 === \"progress\")(\"progress-dark\", animationValue_r3 === \"progress-dark\")(\"pulse\", animationValue_r3 === \"pulse\");\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel())(\"aria-valuetext\", ctx_r0.loadingText());\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(appearanceValue_r2 === \"custom-content\" ? 1 : -1);\n  }\n}\nconst NGX_SKELETON_LOADER_CONFIG = new InjectionToken('ngx-skeleton-loader.config');\n\n/**\n * The `NgxSkeletonLoaderComponent` is a standalone Angular component that provides a skeleton\n * loader UI element.\n * It can be used to display a loading state before the actual content is available.\n * The component can be configured with various options such as the number of elements, appearance,\n * animation, and theme.\n */\nclass NgxSkeletonLoaderComponent {\n  constructor() {\n    /**\n     * Injects the `NgxSkeletonLoaderConfig` configuration object, which is optional.\n     * This configuration object provides various options for customizing the behavior\n     * and appearance of the `NgxSkeletonLoaderComponent`.\n     */\n    this.#config = inject(NGX_SKELETON_LOADER_CONFIG, {\n      optional: true\n    });\n    /**\n     * The `count` property is an input that determines the number of skeleton loader elements\n     * to display.\n     * It is initialized with the value from the `NgxSkeletonLoaderConfig` object, or 1 if the config\n     * is not provided.\n     * The `transform: numberAttribute` option ensures that the input value is converted to a number.\n     */\n    this.count = input(this.#config?.count || 1, {\n      transform: numberAttribute\n    });\n    /**\n     * The `loadingText` property is an input that determines the text to display while the content\n     * is loading.\n     * It is initialized with the value from the `NgxSkeletonLoaderConfig` object, or 'Loading...'\n     * if the config is not provided.\n     */\n    this.loadingText = input(this.#config?.loadingText || 'Loading...');\n    /**\n     * The `appearance` property is an input that determines the visual appearance of the skeleton\n     * loader.\n     * It is initialized with the value from the `NgxSkeletonLoaderConfig` object, or 'line' if the\n     * config is not provided.\n     * The available appearance options are defined in the `NgxSkeletonLoaderConfig['appearance']`\n     * type.\n     */\n    this.appearance = input(this.#config?.appearance || 'line');\n    /**\n     * The `animation` property is an input that determines the type of animation to apply to the\n     * skeleton loader.\n     * It is initialized with the value from the `NgxSkeletonLoaderConfig` object, or 'progress' if\n     * the config is not provided.\n     * The available animation options are defined in the `NgxSkeletonLoaderConfig['animation']` type.\n     */\n    this.animation = input(this.#config?.animation || 'progress');\n    /**\n     * The `ariaLabel` property is an input that determines the ARIA label to be used for the skeleton\n     * loader element. This is useful for providing accessibility information to screen readers.\n     * It is initialized with the value from the `NgxSkeletonLoaderConfig` object, or 'loading' if the\n     * config is not provided.\n     */\n    this.ariaLabel = input(this.#config?.ariaLabel || 'loading');\n    /**\n     * The `theme` property is an input that determines the theme configuration for the skeleton\n     * loader.\n     * It is initialized with the value from the `NgxSkeletonLoaderConfig` object, or `null` if the\n     * config is not provided.\n     * The theme configuration is defined by the `NgxSkeletonLoaderConfigTheme` type, which allows\n     * customizing various aspects of the skeleton loader's appearance, such as colors, animation,\n     * etc.\n     */\n    this.theme = input(this.#config?.theme || null);\n    /**\n     * The `items` property is a computed property that generates an array of indices based on the\n     * `count` input.\n     * If the `appearance` is set to 'custom-content', the `count` is forced to 1 to ensure that the\n     * skeleton loader is displayed as a single DOM node, as required by the 'custom-content'\n     * appearance.\n     * This computed property is used to render the appropriate number of skeleton loader elements.\n     */\n    this.items = computed(() => {\n      let count = this.count() || 1;\n      // Force count to 1 when custom-content is used\n      if (this.appearance() === 'custom-content') {\n        // Shows error message only in Development\n        if (isDevMode() && count !== 1) {\n          console.error(`\\`NgxSkeletonLoaderComponent\\` enforces elements with \"custom-content\" appearance as DOM nodes. Forcing \"count\" to \"1\".`);\n          count = 1;\n        }\n      }\n      return [...Array(count)].map((_, index) => index);\n    });\n    /**\n     * A computed property that returns the final theme configuration for the skeleton loader.\n     * If the `extendsFromRoot` property is set in the `NgxSkeletonLoaderConfig`, the theme is merged\n     * with the root theme configuration. Otherwise, the theme is returned as-is.\n     * This allows the skeleton loader to inherit global theme settings while still allowing for\n     * component-specific theme customization.\n     */\n    this.styles = computed(() => {\n      const theme = this.theme();\n      if (this.#config?.theme?.extendsFromRoot) {\n        return {\n          ...this.#config?.theme,\n          ...theme\n        };\n      }\n      return theme;\n    });\n  }\n  /**\n   * Injects the `NgxSkeletonLoaderConfig` configuration object, which is optional.\n   * This configuration object provides various options for customizing the behavior\n   * and appearance of the `NgxSkeletonLoaderComponent`.\n   */\n  #config;\n  static {\n    this.ɵfac = function NgxSkeletonLoaderComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxSkeletonLoaderComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgxSkeletonLoaderComponent,\n      selectors: [[\"ngx-skeleton-loader\"]],\n      inputs: {\n        count: [1, \"count\"],\n        loadingText: [1, \"loadingText\"],\n        appearance: [1, \"appearance\"],\n        animation: [1, \"animation\"],\n        ariaLabel: [1, \"ariaLabel\"],\n        theme: [1, \"theme\"]\n      },\n      ngContentSelectors: _c0,\n      decls: 4,\n      vars: 2,\n      consts: [[\"aria-busy\", \"true\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"role\", \"progressbar\", \"tabindex\", \"-1\", 1, \"skeleton-loader\", 3, \"custom-content\", \"circle\", \"progress\", \"progress-dark\", \"pulse\", \"style\"], [\"aria-busy\", \"true\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"role\", \"progressbar\", \"tabindex\", \"-1\", 1, \"skeleton-loader\"]],\n      template: function NgxSkeletonLoaderComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵdeclareLet(0)(1);\n          i0.ɵɵrepeaterCreate(2, NgxSkeletonLoaderComponent_For_3_Template, 2, 15, \"div\", 0, i0.ɵɵrepeaterTrackByIdentity);\n        }\n        if (rf & 2) {\n          i0.ɵɵstoreLet(ctx.appearance());\n          i0.ɵɵadvance();\n          i0.ɵɵstoreLet(ctx.animation());\n          i0.ɵɵadvance();\n          i0.ɵɵrepeater(ctx.items());\n        }\n      },\n      styles: [\".skeleton-loader[_ngcontent-%COMP%]{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader[_ngcontent-%COMP%]:after, .skeleton-loader[_ngcontent-%COMP%]:before{box-sizing:border-box}.skeleton-loader.circle[_ngcontent-%COMP%]{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress[_ngcontent-%COMP%], .skeleton-loader.progress-dark[_ngcontent-%COMP%]{transform:translateZ(0)}.skeleton-loader.progress[_ngcontent-%COMP%]:after, .skeleton-loader.progress[_ngcontent-%COMP%]:before, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:after, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{box-sizing:border-box}.skeleton-loader.progress[_ngcontent-%COMP%]:before, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{animation:_ngcontent-%COMP%_progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress[_ngcontent-%COMP%]:before{background-image:linear-gradient(90deg,#fff0,#fff9,#fff0)}.skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse[_ngcontent-%COMP%]{animation:_ngcontent-%COMP%_pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation-delay:.5s}.skeleton-loader.custom-content[_ngcontent-%COMP%]{height:100%;background:none}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse[_ngcontent-%COMP%], .skeleton-loader.progress-dark[_ngcontent-%COMP%], .skeleton-loader.custom-content[_ngcontent-%COMP%], .skeleton-loader.progress[_ngcontent-%COMP%]:before{animation:none}.skeleton-loader.progress[_ngcontent-%COMP%]:before, .skeleton-loader.progress-dark[_ngcontent-%COMP%], .skeleton-loader.custom-content[_ngcontent-%COMP%]{background-image:none}}@media screen and (min-device-width: 1200px){.skeleton-loader[_ngcontent-%COMP%]{-webkit-user-select:none;user-select:none;cursor:wait}}@keyframes _ngcontent-%COMP%_progress{0%{transform:translate3d(-200px,0,0)}to{transform:translate3d(calc(200px + 100vw),0,0)}}@keyframes _ngcontent-%COMP%_pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\"],\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSkeletonLoaderComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-skeleton-loader',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      standalone: true,\n      template: \"@let appearanceValue = appearance();\\n@let animationValue = animation();\\n@for (item of items(); track item) {\\n  <div\\n    class=\\\"skeleton-loader\\\"\\n    [attr.aria-label]=\\\"ariaLabel()\\\"\\n    aria-busy=\\\"true\\\"\\n    aria-valuemin=\\\"0\\\"\\n    aria-valuemax=\\\"100\\\"\\n    [attr.aria-valuetext]=\\\"loadingText()\\\"\\n    role=\\\"progressbar\\\"\\n    tabindex=\\\"-1\\\"\\n    [class.custom-content]=\\\"appearanceValue === 'custom-content'\\\"\\n    [class.circle]=\\\"appearanceValue === 'circle'\\\"\\n    [class.progress]=\\\"animationValue === 'progress'\\\"\\n    [class.progress-dark]=\\\"animationValue === 'progress-dark'\\\"\\n    [class.pulse]=\\\"animationValue === 'pulse'\\\"\\n    [style]=\\\"styles()\\\"\\n    >\\n    @if (appearanceValue  === 'custom-content') {\\n      <ng-content></ng-content>\\n    }\\n  </div>\\n}\\n\",\n      styles: [\".skeleton-loader{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader:after,.skeleton-loader:before{box-sizing:border-box}.skeleton-loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress,.skeleton-loader.progress-dark{transform:translateZ(0)}.skeleton-loader.progress:after,.skeleton-loader.progress:before,.skeleton-loader.progress-dark:after,.skeleton-loader.progress-dark:before{box-sizing:border-box}.skeleton-loader.progress:before,.skeleton-loader.progress-dark:before{animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress:before{background-image:linear-gradient(90deg,#fff0,#fff9,#fff0)}.skeleton-loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse{animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation-delay:.5s}.skeleton-loader.custom-content{height:100%;background:none}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse,.skeleton-loader.progress-dark,.skeleton-loader.custom-content,.skeleton-loader.progress:before{animation:none}.skeleton-loader.progress:before,.skeleton-loader.progress-dark,.skeleton-loader.custom-content{background-image:none}}@media screen and (min-device-width: 1200px){.skeleton-loader{-webkit-user-select:none;user-select:none;cursor:wait}}@keyframes progress{0%{transform:translate3d(-200px,0,0)}to{transform:translate3d(calc(200px + 100vw),0,0)}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\\n\"]\n    }]\n  }], null, null);\n})();\nclass NgxSkeletonLoaderModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxSkeletonLoaderModule,\n      providers: [{\n        provide: NGX_SKELETON_LOADER_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n  static {\n    this.ɵfac = function NgxSkeletonLoaderModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NgxSkeletonLoaderModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxSkeletonLoaderModule,\n      imports: [NgxSkeletonLoaderComponent],\n      exports: [NgxSkeletonLoaderComponent]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSkeletonLoaderModule, [{\n    type: NgModule,\n    args: [{\n      imports: [NgxSkeletonLoaderComponent],\n      exports: [NgxSkeletonLoaderComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-skeleton-loader\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_SKELETON_LOADER_CONFIG, NgxSkeletonLoaderComponent, NgxSkeletonLoaderModule };\n"],
  "mappings": "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",
  "names": []
}
